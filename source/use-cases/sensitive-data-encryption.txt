=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

If you store information in MongoDB such as confidential personal details, payment information, or proprietary data, you are probably interested in protecting your data from unauthorized access. In addition, the data you store may be subject to governance, privacy, and security compliance mandates. 

MongoDB offers several methods that reduce your risk of a data breach resulting from unauthorized access whether accidental or by a malicious act including:

* `Role-based access control <https://docs.mongodb.com/manual/core/authorization/>`_
* `Monitoring and logging <https://docs.mongodb.com/manual/core/auditing/>`_
* `TLS/SSL network transport encryption <https://docs.mongodb.com/manual/core/security-transport-encryption/>`_
* `Data encryption at rest <https://docs.mongodb.com/manual/core/security-encryption-at-rest/>`_
* `Client-side field level encryption <https://docs.mongodb.com/manual/core/security-client-side-encryption/>`_

This document guides you through setup and implementation of Client-Side Field Level Encryption (CSFLE), a feature that encrypts document fields specified by a developer, in a example scenario to demonstrate how it can be used to secure your data.

.. note::

  Client-side Field Level Encryption is available starting in MongoDB 4.2 Enterprise only

Problem
~~~~~~~

In this scenario, we secure sensitive data on a Medical Care Management System which stores patients' personal information, appointments, and vital sign measurement reports for a fictitious company, *MedcoMD*. While none of this data should ever be exposed to the public, if a malicious user gained access to data such as the patient's social security number (SSN) or their vital sign measurements, it would be disastrous and damaging to the company.

MedcoMD provides access to this system for two types of users:

1.  Receptionists, who use the system to schedule appointments for Patients, identified by a combination of contact information and their SSN.
2.  Doctors, who use the system to access and enter Patients' vital sign measurements

While MedcoMD trusts their employees never to retrieve sensitive data, there are several ways it could be exposed if left unencrypted including by leaving it exposed on a screen or print-out, by sniffing the data from network packets on an insecure network, or by obtaining unauthorized access to the database. If they store complete, encrypted documents on the server, every query would require decrypting the entire collection which is too computationally expensive, and therefore, slow.

What can MedcoMD do to balance the functionality and access restrictions of their Medical Care Management System?

Solution
~~~~~~~~

MongoDB CSFLE allows the developer to specify the sensitive fields of a document to keep encrypted on the server. The client encrypts the specified, sensitive fields upon writes and transparently decrypts them upon access when necessary. The collections can be queried by any of the unencrypted fields without additional cost, and encrypted fields can be queried -- with restrictions documented in the following section, :ref:`DeterministicVsRandom` -- with minimal overhead.

If an attacker manages to gain access to the MongoDB database, unless they also gain access to an authorized client, they will only be able to see the sensitive fields in encrypted form.

MedcoMD can now be confident that MongoDB will keep their sensitive data secure and in compliance with data privacy regulations.

.. _DeterministicVsRandom:

Deterministic vs Random Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

TODO

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aenean eu consequat lorem. Ut posuere est sed sodales pharetra. Cras
volutpat, massa laoreet varius dictum, leo odio porttitor ante, nec
auctor tortor orci et mi. Maecenas tempor, lacus vehicula molestie
pulvinar, ante eros faucibus odio, sed consequat quam tellus vel arcu.
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
cubilia Curae; Nunc non interdum purus, ultricies laoreet tortor.

B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

Proin non mi a felis luctus vulputate nec pharetra odio. Ut pretium
scelerisque nulla, sed euismod nisi pellentesque sit amet. Proin mollis
mauris eu libero ullamcorper rutrum. Pellentesque vitae enim sed magna
accumsan maximus et quis mi. Ut vel laoreet turpis. Vivamus vitae odio
sed arcu finibus pretium vel maximus nisi. Nullam gravida consequat
porta.

C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
