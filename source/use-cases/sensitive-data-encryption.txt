=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Many applications make use of sensitive information such as confidential personal details, payment information, or proprietary data. In some jurisdictions, this data may be subject to governance, privacy, and security compliance mandates. Unauthorized access of data or a failure to comply to a mandate often results in significant reputation damage and financial penalties. Therefore, it is important to keep sensitive data secure.

MongoDB offers several methods that protect your data from unauthorized access including:
 
* `Role-based access control <https://docs.mongodb.com/manual/core/authorization/>`_
* `Monitoring and logging <https://docs.mongodb.com/manual/core/auditing/>`_
* `TLS/SSL network transport encryption <https://docs.mongodb.com/manual/core/security-transport-encryption/>`_
* `Encryption at rest <https://docs.mongodb.com/manual/core/security-encryption-at-rest/>`_

Another feature that enables 

This document guides you through setup and implementation of `Client-Side Field Level Encryption (CSFLE) <https://docs.mongodb.com/manual/core/security-client-side-encryption/>`_, a MongoDB feature that encrypts document fields specified by a developer, 
In the following scenario demonstrates how it can be used to secure your data.
.. note::

  Client-side Field Level Encryption is available starting in MongoDB 4.2 Enterprise only

Problem
~~~~~~~

In this scenario, we secure sensitive data on a Medical Care Management System which stores patients' personal information, appointments, and vital sign measurement reports for a fictitious company, *MedcoMD*. None of the patient data is public, and certain data such as their social security number (SSN) and vital sign measurements are particularly sensitive. It is important for the company and the patient that the data is kept private and secure.

MedcoMD needs this system to satisfy the following use cases:

- Doctors use the system to access Patients' medical records and add new vital sign measurements.
- Receptionists use the system to schedule appointments for Patients, who are identified by a combination of contact information and their SSN.
- Receptionists cannot access nor update Patients' medical records.

MedcoMD is also concerned with disclosure of private information through any of the following methods:

- Printing the information or leaving it displayed on a screen where unauthorized people can view it
- Communicating on an insecure network
- Gaining access to the database on one of the permissioned users

What can MedcoMD do to balance the functionality and access restrictions of their Medical Care Management System?

Solution
~~~~~~~~

The MedcoMD software engineers review the Medical Care Management System specification and determine that Doctors and Receptionists require different levels of access to the data.


While role-based access control could separate the access, the granularity is only as fine as a collection


In order to minimize the chance of disclosure of sensitive data, they decide encryption is the best option


The MedcoMD developers decide this is an ideal opportunity to use CSFLE which allows them to select specific fields of a document that should be kept encrypted on the server. This feature will perform validation and encryption of the specified sensitive data fields, ensuring that they remain encrypted on the server. 

be provided with a client that can access and
 and the Receptionists will be provided


The client encrypts the specified, sensitive fields upon writes and transparently decrypts them upon access when necessary. The collections can be queried by any of the unencrypted fields without additional cost, and encrypted fields can be queried -- with restrictions documented in the :ref:`DeterministicVsRandom` section -- with minimal overhead.

If an unauthorized user manages to gain access to the MongoDB database, unless they also gain access to an authorized client, they will only be able to see the sensitive fields in encrypted form.

MedcoMD can now be confident that MongoDB will keep their sensitive data secure and in compliance with data privacy regulations.

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aenean eu consequat lorem. Ut posuere est sed sodales pharetra. Cras
volutpat, massa laoreet varius dictum, leo odio porttitor ante, nec
auctor tortor orci et mi. Maecenas tempor, lacus vehicula molestie
pulvinar, ante eros faucibus odio, sed consequat quam tellus vel arcu.
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
cubilia Curae; Nunc non interdum purus, ultricies laoreet tortor.

B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

.. _DeterministicVsRandom:

Deterministic vs Random Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Proin non mi a felis luctus vulputate nec pharetra odio. Ut pretium
scelerisque nulla, sed euismod nisi pellentesque sit amet. Proin mollis
mauris eu libero ullamcorper rutrum. Pellentesque vitae enim sed magna
accumsan maximus et quis mi. Ut vel laoreet turpis. Vivamus vitae odio
sed arcu finibus pretium vel maximus nisi. Nullam gravida consequat
porta.

C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
