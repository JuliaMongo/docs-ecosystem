=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Cras sed rutrum nisi, vitae tristique risus. Aliquam erat volutpat.
Donec auctor nisl eget ornare accumsan. Pellentesque lectus tortor,
consectetur molestie pellentesque ac, blandit non libero.

Problem
~~~~~~~

Pellentesque non mi et est congue mattis pretium sit amet mi. Praesent
nec tortor nec arcu molestie dapibus. Phasellus at nunc ut quam molestie
finibus. Suspendisse finibus lectus eget nulla eleifend, vel consequat
leo rhoncus. Phasellus lacinia tortor id aliquet condimentum. Morbi
sodales est a leo rhoncus, non pretium neque dignissim.

Solution
~~~~~~~~

Praesent sit amet elit pretium mi molestie porta a sit amet ipsum. Sed
sollicitudin purus et mi blandit sodales.

- Deterministic vs Non-Deterministic

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aenean eu consequat lorem. Ut posuere est sed sodales pharetra. Cras
volutpat, massa laoreet varius dictum, leo odio porttitor ante, nec
auctor tortor orci et mi. Maecenas tempor, lacus vehicula molestie
pulvinar, ante eros faucibus odio, sed consequat quam tellus vel arcu.
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
cubilia Curae; Nunc non interdum purus, ultricies laoreet tortor.

B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB uses JSON Schema to enforce particular datatypes for specific fields during insert and update operations. MongoDB CSFLE requires JSON Schema to identify fields to automatically encrypt and decrypt, the data encryption key id, and the type of encryption algorithm to use:

* The encryption algorithm (deterministic or random)
* The data key
* The BSON Type

.. note::

    A single data key can be used for all encrypted fields, or you can use individual data keys that are specific to each field.


The MedcoMD engineers receive specific requirements for the fields of data. `Deterministic Encryption <https://docs.mongodb.com/manual/core/security-client-side-encryption/#deterministic-encryption>`_ and `Random encryption <https://docs.mongodb.com/manual/core/security-client-side-encryption/#random-encryption>`_ are the two different methods of encrypting sensitive fields. The following table illustrates the data model of the Medco Management System.

.. table:: 
    :widths: 50 50

    +-----------------------------+---------------------+----------------------------------------------+
    |Field type                   |Encryption Algorithm | BSON Type                                    |
    +=============================+=====================+==============================================+
    | Name                        | Non-Encrypted       | String                                       |
    +-----------------------------+---------------------+----------------------------------------------+
    | SSN                         | Deterministic       |  Int                                         |
    +-----------------------------+---------------------+----------------------------------------------+
    | Blood Type                  | Random              |  String                                      |
    +-----------------------------+---------------------+----------------------------------------------+
    | Medical Records             | Random              |  Array                                       |
    +-----------------------------+---------------------+----------------------------------------------+
    | Insurance: Policy Number    | Deterministic       |  Int (embedded inside `insurance` object)    |
    +-----------------------------+---------------------+----------------------------------------------+
    | Insurance: Provider         | Non-Encrypted       |  String (embedded inside `insurance` object) |
    +-----------------------------+---------------------+----------------------------------------------+

To automatically encrypt and decrypt create a JSON Schema using the information in the data model and pass the schema as a JSON object to the secure client to specify the encrypted field properties.
In the JSON, you can specify `encryptMetadata <https://docs.mongodb.com/manual/reference/security-client-side-automatic-json-schema/#encryptmetadata-schema-keyword>`_ that is passed down to the fields under the ``properties``
nested object. 

.. code::

        {
            "bsonType" : "object",
            "encryptMetadata" : {
                "keyId" : // copy and paste your keyID generated here
            },
            "properties": {
                // copy and paste your fields here 
            }
        }

Create JSON objects for each field and append them to the `properties` map.

.. code::

    // Deterministic encryption supports querying and is equally as secure as random encryption for high cardinality (very unique) fields such as SSN. A privileged user in the MedcoMD Medical Care Management System might want to query on SSN to verify a patient's identity. One thing to note is that you do not have to include keyId if you specified it in the top-level encryptMetadata field. You could include keyId if you want different users with specific keys to be able to access a specific subset of the encrypted data.

    "ssn": {
        "encrypt": {
            "bsonType": "int",
            "keyId": <keyId>,
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
        }
    }


.. code:: javascript

    // Random encryption does not support filtering and is best used on fields with low cardinality (very few unique fields) to prevent against frequency analysis attacks. Since there are only 8 blood types, this field is randomly encrypted. This field is decrypted by a CSFLE-enabled client with appropriate access once the document is retrieved.

    "bloodType": {
        "encrypt": {
            "bsonType": "string",
            "keyId": <keyId>,
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }


.. code:: javascript

    // Arrays can only be auto-encrypted via random encryption. 

    "medicalRecords": {
        "encrypt": {
            "bsonType": "array",
            "keyId": <keyId>,
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }

.. code:: javascript

    // insurance.policyNumber number is deterministically encrypted because the policy number is a very unique field. Note, that the JSON for policyNumber follows the same structure the JSON for SSN, however, policyNumber is nested inside insurance.properties because it is a nested field.

    "insurance": {
        "bsonType": "object",
        "properties": {
            "policyNumber": {
                "encrypt": {
                    "bsonType": "int",
                    "keyId": <keyId>,
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
            }
        }
    }    



- View the full JSON Schema for the Medco Medical Management System `here <https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/MedcoMDSchema.json>`_
- View the `helper code <https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/FieldLevelEncryptionJSONSchema.java>`_ to generate the full JSON Schema for this MedcoMD guide in Java. 


C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
