=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Cras sed rutrum nisi, vitae tristique risus. Aliquam erat volutpat.
Donec auctor nisl eget ornare accumsan. Pellentesque lectus tortor,
consectetur molestie pellentesque ac, blandit non libero.

Problem
~~~~~~~

Pellentesque non mi et est congue mattis pretium sit amet mi. Praesent
nec tortor nec arcu molestie dapibus. Phasellus at nunc ut quam molestie
finibus. Suspendisse finibus lectus eget nulla eleifend, vel consequat
leo rhoncus. Phasellus lacinia tortor id aliquet condimentum. Morbi
sodales est a leo rhoncus, non pretium neque dignissim.

Solution
~~~~~~~~

Praesent sit amet elit pretium mi molestie porta a sit amet ipsum. Sed
sollicitudin purus et mi blandit sodales.

- Deterministic vs Non-Deterministic

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB `Client-Side Field Level Encryption (CSFLE) <https://docs.mongodb.com/manual/core/security-client-side-encryption/>`_ uses an encryption strategy called *envelope encryption* in which keys used to encrypt/decrypt data (called **data encryption keys**) are encrypted with another key (called the **master key**). For more information on the features of envelope encryption and key management concepts, see `AWS Key Management Service Concepts <https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#enveloping>`_.

The master key, used by the MongoDB driver to create and encrypt data keys, should be stored remotely in a `Key Management System <https://en.wikipedia.org/wiki/Key_management#Key_management_system>`_. The data encryption keys, generated and used by the MongoDB driver to encrypt and decrypt document fields, are stored in a key vault collection in the same database as the encrypted data.

In this step, we generate a local master key to expedite setup of our development environment.

.. admonition:: Local Master Keys Are Not Secure
   :class: important

   To ensure that the master key cannot be compromised, do not use a local master key in a production environment. Instead, use a secure KMS such as `AWS KMS <https://aws.amazon.com/kms/>`_.

   We demonstrate how to transition from a locally-hosted master key to a remote AWS KMS master key in a later step of this guide.

.. tabs::

  tabs:

    - id: java-master-key-generator
      name: "Java"
      content: |

        The following script generates a 96-byte local master key and saves it to a file called ``master-key.txt`` in the directory from which the script is executed.

        .. code-block:: java

          import java.io.FileOutputStream;
          import java.io.IOException;
          import java.security.SecureRandom;

          public class CreateMasterKeyFile {
            public static void main(final String[] args) {

              final byte[] localMasterKey = new byte[96];
              new SecureRandom().nextBytes(localMasterKey);

              try (FileOutputStream stream = new FileOutputStream("master-key.txt")) {
                stream.write(localMasterKey);
              } catch (IOException e)  {
                e.printStackTrace();
              }
            }
          }


B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

`JSON Schema
<http://json-schema.org/>`_ is a vocabulary that allows you to annotate and 
validate JSON documents. MongoDB extends the JSON Schema standard to allow CSFLE
to use automatically encrypt and decrypt the fields of documents in a collection. 

The following fields are required in the JSON Schema to enable automatic 
encryption and decryption for each field:

* The encryption algorithm (:manual:`Deterministic Encryption </core/security-client-side-encryption#deterministic-encryption>` or :manual:`Random Encryption </core/security-client-side-encryption#random-encryption>`)
* The data key
* The BSON Type (only required by deterministically encrypted fields)

.. note::

    A single data key can be used for all encrypted fields, or you can use individual data keys that are specific to each field.


The MedcoMD engineers receive specific requirements for the fields of
data and their encryption strategies. The following table illustrates
the data model of the Medco Management System.



.. list-table::
   :header-rows: 1

   * - Field type
     - Encryption Algorithm
     - BSON Type
   * - Name
     - Non-Encrypted 
     - String
   * - SSN
     - Deterministic
     - Int
   * - Blood Type
     - Random
     - String
   * - Medical Records
     - Random
     - Array
   * - Insurance: Policy Number
     - Deterministic
     - Int (embedded inside `insurance` object) 
   * - Insurance: Provider
     - Non-Encrypted
     - String (embedded inside `insurance` object)




To automatically encrypt and decrypt data, the MedcoMD engineers create
a JSON Schema that specifies which fields should be encrypted, and which
encryption method to use. Initially, they define a data key for all
fields in the data model by specifying the `encryptMetadata
<https://docs.mongodb.com/manual/reference/security-client-side-automatic-json-schema/#encryptmetadata-schema-keyword>`_
attribute. All child properties will inherit this encryption key unless
specifically overwritten. 

.. code-block:: javascript

        {
            "bsonType" : "object",
            "encryptMetadata" : {
                "keyId" : // copy and paste your keyID generated here
            },
            "properties": {
                // copy and paste your fields here 
            }
        }

MedcoMD engineers create JSON objects for each field and append them to
the `properties` map.

SSN
+++
``ssn`` is a field representing the patient's social security number. This
field is sensitive and should be encrypted. MedcoMD engineers decide 
upon deterministic encryption based on the following properties:

* Queryable
* High cardinality 

.. code-block:: json

    "ssn": {
        "encrypt": {
            "bsonType": "int",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
        }
    }



Blood Type
++++++++++
``bloodType`` is a field representing the patient's blood type. This field is 
sensitive and should be encrypted. MedcoMD engineers decide 
upon random encryption based on the following properties:

* No plans to query
* Low cardinality 

.. code-block:: json

    "bloodType": {
        "encrypt": {
            "bsonType": "string",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }


Medical Records
+++++++++++++++
``medicalRecords`` is an array field holding a set of medical records. Each 
medical record document specifies information, such as the patient's blood 
pressure, weight, and heart rate.  This field is sensitive and should be 
encrypted. MedcoMD engineers decide upon random encryption based on 
the following properties:

* Array fields must use random encryption with CSFLE to enable auto-encryption

.. code-block:: json

    "medicalRecords": {
        "encrypt": {
            "bsonType": "array",
            "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Random"
        }
    }

Insurance: Policy Number
++++++++++++++++++++++++
``insurance.policyNumber`` is a field embedded inside the ``Insurance`` object 
field and represents the patient's policy number. This policy number is a 
distinct and sensitive field. MedcoMD engineers decide upon 
deterministic encryption based on the following properties:

* Queryable
* High cardinality 

.. code-block:: json

    "insurance": {
        "bsonType": "object",
        "properties": {
            "policyNumber": {
                "encrypt": {
                    "bsonType": "int",
                    "algorithm": "AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic"
                }
            }
        }
    }    


Recap
+++++++
MedcoMD engineers created a JSON Schema that satisfies their requirements of 
making sensitive data queryable and secure. View the full `JSON Schema 
for the Medco Medical Management System <https://raw.githubusercontent.com/mongodb/docs-assets/DOCSP-json-schema-helper-and-json/MedcoMDSchema.json>`_. 


.. tabs::

   tabs:

     - id: java-jsonschema-generation
       name: "Java"
       content: |
       
        View the `helper code in Java <https://gist.github.com/ccho-mongodb/088176b1bed3b9e54cdc0c2c3c537d1b>`_. 

C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
