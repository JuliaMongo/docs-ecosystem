=========================
Sensitive Data Encryption
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Introduction
------------

Many applications make use of sensitive information such as confidential personal details, payment information, or proprietary data. In some jurisdictions, this data may be subject to governance, privacy, and security compliance mandates. Unauthorized access of data or a failure to comply to a mandate often results in significant reputation damage and financial penalties. Therefore, it is important to keep sensitive data secure.

MongoDB offers several methods that protect your data from unauthorized access including:
 
* `Role-based access control <https://docs.mongodb.com/manual/core/authorization/>`_
* `Monitoring and logging <https://docs.mongodb.com/manual/core/auditing/>`_
* `TLS/SSL network transport encryption <https://docs.mongodb.com/manual/core/security-transport-encryption/>`_
* `Encryption at rest <https://docs.mongodb.com/manual/core/security-encryption-at-rest/>`_

Another MongoDB feature that prevents unauthorized access of data is `Client-Side Field Level Encryption (CSFLE) <https://docs.mongodb.com/manual/core/security-client-side-encryption/>`_. This feature allows a developer to selectively encrypt individual fields of a document on the client-side before it is sent to the server. This keeps the encrypted data private from the providers hosting the database as well as any user that has direct access to the database.

This guide provides steps for setup and implementation of CSFLE with a practical example.

.. note::

  Client-side Field Level Encryption is available starting in MongoDB 4.2 Enterprise only

Problem
~~~~~~~

In this scenario, we secure sensitive data on a Medical Care Management System which stores patients' personal information, insurance information, and medical records for a fictional company, *MedcoMD*. None of the patient data is public, and certain data such as their social security number (SSN), insurance policy number, and vital sign measurements are particularly sensitive and subject to privacy compliance. It is important for the company and the patient that the data is kept private and secure.

MedcoMD needs this system to satisfy the following use cases:

- Doctors use the system to access Patients' medical records, insurance information, and add new vital sign measurements.
- Receptionists use the system to verify the Patients' identity, using a combination of their contact information and last four digits of their Social Security Number (SSN).
- Receptionists can view a Patient's insurance policy provider, but not the number
- Receptionists cannot access a Patient's medical records

MedcoMD is also concerned with disclosure of private information through any of the following methods:

- Accidental disclosure of data on the Receptionist's publicly-viewable screen
- Communication of the data over an insecure network
- Direct access to the database by a superuser such as a database administrator

What can MedcoMD do to balance the functionality and access restrictions of their Medical Care Management System?

Solution
~~~~~~~~

The MedcoMD software engineers review the Medical Care Management System specification and determine they must decide the proper method of limiting access to the sensitive data.

The first MongoDB security feature they evaluated was `Encryption at Rest<https://docs.mongodb.com/manual/core/security-encryption-at-rest/>`_ which encrypts data at the storage level. However, this solution did not address the potential issue of database administrators or Receptionists viewing or exposing the sensitive data.

The next MongoDB security feature they evaluated was `Role-Based Access Control<https://docs.mongodb.com/manual/core/authorization/>`_ which allows them to define distinct permissions for users. However, this was insufficient because it did not allow them to differentiate access to specific fields within a document nor does it keep the data safe when transmitted over an insecure network.  

Finally, the MedcoMD developers discover Client-side Field Level Encryption which allows them to specify fields of a document that should be stored in encrypted form on the server. Before sending the data to the server, the client encrypts the specified, sensitive fields. After retrieving data from the server, the client decrypts any encrypted fields transparently and automatically. This prevents any unencrypted sensitive data from being passed over the network as well as access to the data by a user with direct access to the database.

The Doctors will be provided with a client with CSFLE enabled and will therefore be able to access the sensitive data. The Receptionists will be provided a client without CSFLE enabled and therefore will never be able to access the sensitive data nor accidentally leave it displayed on-screen in a public area.

MedcoMD can now be confident that MongoDB will keep their sensitive data secure and compliant with data privacy regulations.

Procedure
---------

Requirements
~~~~~~~~~~~~

- Point to setup and install directions
- Nullam imperdiet lorem vitae vulputate lacinia.
- Donec eget velit tincidunt, gravida diam ac, efficitur lacus.

A. Create a Local Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aenean eu consequat lorem. Ut posuere est sed sodales pharetra. Cras
volutpat, massa laoreet varius dictum, leo odio porttitor ante, nec
auctor tortor orci et mi. Maecenas tempor, lacus vehicula molestie
pulvinar, ante eros faucibus odio, sed consequat quam tellus vel arcu.
Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere
cubilia Curae; Nunc non interdum purus, ultricies laoreet tortor.

B. Define a JSON Schema
~~~~~~~~~~~~~~~~~~~~~~~

.. _DeterministicVsRandom:

Deterministic vs Random Encryption
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Proin non mi a felis luctus vulputate nec pharetra odio. Ut pretium
scelerisque nulla, sed euismod nisi pellentesque sit amet. Proin mollis
mauris eu libero ullamcorper rutrum. Pellentesque vitae enim sed magna
accumsan maximus et quis mi. Ut vel laoreet turpis. Vivamus vitae odio
sed arcu finibus pretium vel maximus nisi. Nullam gravida consequat
porta.

C. Configure the MongoDB Client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Donec sem felis, iaculis id pharetra sed, sollicitudin ut nisl.
Suspendisse commodo sagittis ante in ullamcorper. Etiam viverra
pellentesque suscipit. Pellentesque interdum egestas libero, ut varius
velit congue vel.

D. Perform Encrypted Read/Write Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Etiam hendrerit posuere justo, ac hendrerit lorem pellentesque sed.
Fusce ullamcorper neque eu libero aliquam, sed placerat sapien cursus.
Vestibulum maximus magna sed velit feugiat tempor.

Ut accumsan pellentesque metus, at porta felis dapibus vulputate. Aenean
malesuada interdum libero in feugiat. Fusce pharetra massa eget leo
varius, et gravida massa tempus.

Ut mattis eros elit, sed ultrices purus lacinia sed. Curabitur tincidunt
tellus eget neque porta dictum ac vel orci. Vestibulum ante ipsum primis
in faucibus orci luctus et ultrices posuere cubilia Curae.

Praesent feugiat arcu non risus elementum eleifend. Nullam sed iaculis
erat.

E. Convert to a Remote Master Key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Fusce porta lectus et enim vehicula malesuada. In porttitor ipsum eu
dictum congue. Fusce pharetra sagittis lacus sed posuere. Donec porta
posuere gravida. Quisque nisi massa, condimentum vitae ligula eget,
fringilla malesuada quam. Mauris in semper nulla, non blandit tortor.
Mauris consequat eget urna at eleifend. Suspendisse potenti. Fusce at
justo malesuada, finibus felis non, dignissim nisl. Ut blandit nulla sit
amet massa euismod vehicula.

Summary
-------

- What we wanted to do
- What we did
- More reading
